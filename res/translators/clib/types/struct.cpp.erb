<%#
    Structs must have each field converted to a compatible Lib type (i.e., the
    field type `foo' becomes `__sklib_foo'). Then adapters must be made to and
    from the Lib and SK code. Can't use a macro for this and cannot be a static
    cast so we must generate the functions individually.
 %>
<%
  @structs.each do |struct|
%>
<%#
    Definition of structs can use lib_struct_field_for for convenience
%>
typedef struct {
<%
    struct[:fields].each do |field_name, field_data|
%>
    <%= lib_struct_field_for(field_name, field_data) %>;
<%
    end # end fields.each
%>
} __sklib_<%= struct[:name] %>;
<%#
    Make adapter function for struct -> __sklib_struct
%>
__sklib_<%= struct[:name] %> <%= func_prefix %>__to_sklib_<%= struct[:name] %>(<%= struct[:name] %> v) {
    __sklib_<%= struct[:name] %> __skreturn;
<%#
    For every field, convert using adapter functions for this field's type
%>
<%
    struct[:fields].each do |field_name, field_data|
      # If an array copy over each value in the array (1D array << {1,2}D array)
      if field_data[:is_array]
        get_Nd_array_size_as_1d(field_data).times do |i|
%>
    __skreturn.<%= field_name %>[<%= i %>] = <%= lib_adapter_fn_for field_data %>(v.<%= field_name %><%= get_Nd_array_index_as_1d(field_data, i) %>);
<%
        end # end times
      else # else, copy over using lib type and sk to lib type adapter
%>
    __skreturn.<%= field_name %> = <%= lib_adapter_fn_for field_data %>(v.<%= field_name %>);
<%
      end # end if
    end # end fields.each
%>
    return __skreturn;
}
<%#
    Make adapter function for __sklib_struct -> struct
%>
<%= struct[:name] %> <%= func_prefix %>__to_<%= struct[:name] %>(__sklib_<%= struct[:name] %> v) {
    <%= struct[:name] %> __skreturn;
<%#
    For every field, convert using adapter functions for this field's type
%>
<%
    struct[:fields].each do |field_name, field_data|
      # If an array copy over each value in the array ({1,2}D array << 1D array)
      if field_data[:is_array]
        get_Nd_array_size_as_1d(field_data).times do |i|
%>
    __skreturn.<%= field_name %><%= get_Nd_array_index_as_1d(field_data, i) %> = <%= sk_adapter_fn_for field_data %>(v.<%= field_name %>[<%= i %>]);
<%
        end # end times
      else # else standard copy converted as SK type using SK type adapter)
%>
    __skreturn.<%= field_name %> = <%= sk_adapter_fn_for field_data %>(v.<%= field_name %>);
<%
      end # end if
    end # end fields.each
%>
    return __skreturn;
}
<%
  end
%>
