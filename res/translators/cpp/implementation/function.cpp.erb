<%#
    Start with exposing the CLib signatures for each function. Then implement
    each of the function bodies calling the SK-clib code. This is a four-step
    process: variableize the arguments to the SK call from their lib-type
    adapted versions, make the call (and return the call if non-void).
%>

<%
  @functions.each do |function|
%>
<%= cpp_signature_for(function) %> {
<%
    function[:parameters].each do |param_name, param_data|
%>
<%#
    1. Convert each parameter using the adapter functions available
%>
<%
      param_adapted =
        if param_data[:is_pointer]
          param_name
        else
          adapter_fn = @clib.lib_adapter_fn_for param_data
          "#{adapter_fn}(#{param_name})"
        end
      ptr = param_data[:is_pointer] ? '*' : ''
      const = param_data[:is_const] ? 'const ' : ''
      type = @clib.lib_type_for param_data
      lib_param_decl = "#{const}#{type} #{ptr}__skparam__#{param_name}"
%>
    <%= lib_param_decl %> = <%= param_adapted %>;
<%
    end # end parameters.each
%>
<%#
    2. Make the function call to lib function (and assign __skreturn
       if non-void)
%>
<%
    return_val = unless is_void?(function) then
      "#{@clib.lib_type_for function[:return]} __skreturn = "
    end
    lib_fn_name = @clib.lib_function_name_for(function)
    param_list = function[:parameters].map do |param_name, param_data|
      address_of_oper = (param_data[:is_reference] && !param_data[:is_const]) ? '&' : ''
      "#{address_of_oper}__skparam__#{param_name}"
    end.join(', ')
    func_call  = "#{return_val}#{lib_fn_name}(#{param_list})"
%>
    <%= func_call %>;
<%#
    3. Update all non-const references.
%>
<%
    non_const_refs = function[:parameters].select do | _, param_data |
      param_data[:is_reference] && !param_data[:is_const]
    end # end select
    non_const_refs.each do | param_name, param_data |
      adapter_fn = cpp_adapter_fn_for param_data
%>
    <%= param_name %> = <%= adapter_fn %>(__skparam__<%= param_name %>);
<%
    end # end non_const_ptrs.each
%>
<%#
    4. Free any string or vector parameters
%>
<%
    params_to_free = function[:parameters].select do | _, param_data |
      param_data[:type] == 'string' || param_data[:is_vector]
    end # end select
    params_to_free.each do | param_name, param_data |
      type_name = @clib.lib_type_for(param_data)
%>
    __skadapter__free<%=type_name%>(__skparam__<%=param_name%>);
<%
    end # end each
%>
<%#
    5. Return __skreturn variable if non-void
%>
<%
    unless is_void?(function)
%>
    return <%= cpp_adapter_fn_for function[:return] %>(__skreturn);
<%
    end # end unless
%>
}
<%
  end # end functions.each
%>
